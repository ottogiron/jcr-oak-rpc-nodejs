//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./nodetypemanager_types');
//HELPER FUNCTIONS AND STRUCTURES

NodeType.TNodeTypeService_canAddChildNodeWithName_args = function(args) {
  this.nodeType = null;
  this.childNodeName = null;
  if (args) {
    if (args.nodeType !== undefined) {
      this.nodeType = args.nodeType;
    }
    if (args.childNodeName !== undefined) {
      this.childNodeName = args.childNodeName;
    }
  }
};
NodeType.TNodeTypeService_canAddChildNodeWithName_args.prototype = {};
NodeType.TNodeTypeService_canAddChildNodeWithName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeType = new ttypes.TNodeType();
        this.nodeType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.childNodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeType.TNodeTypeService_canAddChildNodeWithName_args.prototype.write = function(output) {
  output.writeStructBegin('TNodeTypeService_canAddChildNodeWithName_args');
  if (this.nodeType !== null && this.nodeType !== undefined) {
    output.writeFieldBegin('nodeType', Thrift.Type.STRUCT, 1);
    this.nodeType.write(output);
    output.writeFieldEnd();
  }
  if (this.childNodeName !== null && this.childNodeName !== undefined) {
    output.writeFieldBegin('childNodeName', Thrift.Type.STRING, 2);
    output.writeString(this.childNodeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeType.TNodeTypeService_canAddChildNodeWithName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
NodeType.TNodeTypeService_canAddChildNodeWithName_result.prototype = {};
NodeType.TNodeTypeService_canAddChildNodeWithName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeType.TNodeTypeService_canAddChildNodeWithName_result.prototype.write = function(output) {
  output.writeStructBegin('TNodeTypeService_canAddChildNodeWithName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeType.TNodeTypeService_canAddChildNodeWithType_args = function(args) {
  this.nodeType = null;
  this.childNodeName = null;
  this.nodeTypeName = null;
  if (args) {
    if (args.nodeType !== undefined) {
      this.nodeType = args.nodeType;
    }
    if (args.childNodeName !== undefined) {
      this.childNodeName = args.childNodeName;
    }
    if (args.nodeTypeName !== undefined) {
      this.nodeTypeName = args.nodeTypeName;
    }
  }
};
NodeType.TNodeTypeService_canAddChildNodeWithType_args.prototype = {};
NodeType.TNodeTypeService_canAddChildNodeWithType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeType = new ttypes.TNodeType();
        this.nodeType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.childNodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.nodeTypeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeType.TNodeTypeService_canAddChildNodeWithType_args.prototype.write = function(output) {
  output.writeStructBegin('TNodeTypeService_canAddChildNodeWithType_args');
  if (this.nodeType !== null && this.nodeType !== undefined) {
    output.writeFieldBegin('nodeType', Thrift.Type.STRUCT, 1);
    this.nodeType.write(output);
    output.writeFieldEnd();
  }
  if (this.childNodeName !== null && this.childNodeName !== undefined) {
    output.writeFieldBegin('childNodeName', Thrift.Type.STRING, 2);
    output.writeString(this.childNodeName);
    output.writeFieldEnd();
  }
  if (this.nodeTypeName !== null && this.nodeTypeName !== undefined) {
    output.writeFieldBegin('nodeTypeName', Thrift.Type.STRING, 3);
    output.writeString(this.nodeTypeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeType.TNodeTypeService_canAddChildNodeWithType_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
NodeType.TNodeTypeService_canAddChildNodeWithType_result.prototype = {};
NodeType.TNodeTypeService_canAddChildNodeWithType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeType.TNodeTypeService_canAddChildNodeWithType_result.prototype.write = function(output) {
  output.writeStructBegin('TNodeTypeService_canAddChildNodeWithType_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeType.TNodeTypeService_canRemoveNode_args = function(args) {
  this.nodeType = null;
  this.nodeName = null;
  if (args) {
    if (args.nodeType !== undefined) {
      this.nodeType = args.nodeType;
    }
    if (args.nodeName !== undefined) {
      this.nodeName = args.nodeName;
    }
  }
};
NodeType.TNodeTypeService_canRemoveNode_args.prototype = {};
NodeType.TNodeTypeService_canRemoveNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeType = new ttypes.TNodeType();
        this.nodeType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeType.TNodeTypeService_canRemoveNode_args.prototype.write = function(output) {
  output.writeStructBegin('TNodeTypeService_canRemoveNode_args');
  if (this.nodeType !== null && this.nodeType !== undefined) {
    output.writeFieldBegin('nodeType', Thrift.Type.STRUCT, 1);
    this.nodeType.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeName !== null && this.nodeName !== undefined) {
    output.writeFieldBegin('nodeName', Thrift.Type.STRING, 2);
    output.writeString(this.nodeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeType.TNodeTypeService_canRemoveNode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
NodeType.TNodeTypeService_canRemoveNode_result.prototype = {};
NodeType.TNodeTypeService_canRemoveNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeType.TNodeTypeService_canRemoveNode_result.prototype.write = function(output) {
  output.writeStructBegin('TNodeTypeService_canRemoveNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeType.TNodeTypeService_isNodeType_args = function(args) {
  this.nodeType = null;
  this.nodeTypeName = null;
  if (args) {
    if (args.nodeType !== undefined) {
      this.nodeType = args.nodeType;
    }
    if (args.nodeTypeName !== undefined) {
      this.nodeTypeName = args.nodeTypeName;
    }
  }
};
NodeType.TNodeTypeService_isNodeType_args.prototype = {};
NodeType.TNodeTypeService_isNodeType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeType = new ttypes.TNodeType();
        this.nodeType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nodeTypeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeType.TNodeTypeService_isNodeType_args.prototype.write = function(output) {
  output.writeStructBegin('TNodeTypeService_isNodeType_args');
  if (this.nodeType !== null && this.nodeType !== undefined) {
    output.writeFieldBegin('nodeType', Thrift.Type.STRUCT, 1);
    this.nodeType.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeTypeName !== null && this.nodeTypeName !== undefined) {
    output.writeFieldBegin('nodeTypeName', Thrift.Type.STRING, 2);
    output.writeString(this.nodeTypeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeType.TNodeTypeService_isNodeType_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
NodeType.TNodeTypeService_isNodeType_result.prototype = {};
NodeType.TNodeTypeService_isNodeType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeType.TNodeTypeService_isNodeType_result.prototype.write = function(output) {
  output.writeStructBegin('TNodeTypeService_isNodeType_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeType.TNodeTypeServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
NodeType.TNodeTypeServiceClient.prototype = {};
NodeType.TNodeTypeServiceClient.prototype.seqid = function() { return this._seqid; }
NodeType.TNodeTypeServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
NodeType.TNodeTypeServiceClient.prototype.canAddChildNodeWithName = function(nodeType, childNodeName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_canAddChildNodeWithName(nodeType, childNodeName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_canAddChildNodeWithName(nodeType, childNodeName);
  }
};

NodeType.TNodeTypeServiceClient.prototype.send_canAddChildNodeWithName = function(nodeType, childNodeName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('canAddChildNodeWithName', Thrift.MessageType.CALL, this.seqid());
  var args = new NodeType.TNodeTypeService_canAddChildNodeWithName_args();
  args.nodeType = nodeType;
  args.childNodeName = childNodeName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NodeType.TNodeTypeServiceClient.prototype.recv_canAddChildNodeWithName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NodeType.TNodeTypeService_canAddChildNodeWithName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('canAddChildNodeWithName failed: unknown result');
};
NodeType.TNodeTypeServiceClient.prototype.canAddChildNodeWithType = function(nodeType, childNodeName, nodeTypeName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_canAddChildNodeWithType(nodeType, childNodeName, nodeTypeName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_canAddChildNodeWithType(nodeType, childNodeName, nodeTypeName);
  }
};

NodeType.TNodeTypeServiceClient.prototype.send_canAddChildNodeWithType = function(nodeType, childNodeName, nodeTypeName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('canAddChildNodeWithType', Thrift.MessageType.CALL, this.seqid());
  var args = new NodeType.TNodeTypeService_canAddChildNodeWithType_args();
  args.nodeType = nodeType;
  args.childNodeName = childNodeName;
  args.nodeTypeName = nodeTypeName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NodeType.TNodeTypeServiceClient.prototype.recv_canAddChildNodeWithType = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NodeType.TNodeTypeService_canAddChildNodeWithType_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('canAddChildNodeWithType failed: unknown result');
};
NodeType.TNodeTypeServiceClient.prototype.canRemoveNode = function(nodeType, nodeName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_canRemoveNode(nodeType, nodeName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_canRemoveNode(nodeType, nodeName);
  }
};

NodeType.TNodeTypeServiceClient.prototype.send_canRemoveNode = function(nodeType, nodeName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('canRemoveNode', Thrift.MessageType.CALL, this.seqid());
  var args = new NodeType.TNodeTypeService_canRemoveNode_args();
  args.nodeType = nodeType;
  args.nodeName = nodeName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NodeType.TNodeTypeServiceClient.prototype.recv_canRemoveNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NodeType.TNodeTypeService_canRemoveNode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('canRemoveNode failed: unknown result');
};
NodeType.TNodeTypeServiceClient.prototype.isNodeType = function(nodeType, nodeTypeName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isNodeType(nodeType, nodeTypeName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isNodeType(nodeType, nodeTypeName);
  }
};

NodeType.TNodeTypeServiceClient.prototype.send_isNodeType = function(nodeType, nodeTypeName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isNodeType', Thrift.MessageType.CALL, this.seqid());
  var args = new NodeType.TNodeTypeService_isNodeType_args();
  args.nodeType = nodeType;
  args.nodeTypeName = nodeTypeName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NodeType.TNodeTypeServiceClient.prototype.recv_isNodeType = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NodeType.TNodeTypeService_isNodeType_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isNodeType failed: unknown result');
};
NodeType.TNodeTypeServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
NodeType.TNodeTypeServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

NodeType.TNodeTypeServiceProcessor.prototype.process_canAddChildNodeWithName = function(seqid, input, output) {
  var args = new NodeType.TNodeTypeService_canAddChildNodeWithName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.canAddChildNodeWithName.length === 2) {
    Q.fcall(this._handler.canAddChildNodeWithName, args.nodeType, args.childNodeName)
      .then(function(result) {
        var result = new NodeType.TNodeTypeService_canAddChildNodeWithName_result({success: result});
        output.writeMessageBegin("canAddChildNodeWithName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new NodeType.TNodeTypeService_canAddChildNodeWithName_result(err);
        output.writeMessageBegin("canAddChildNodeWithName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.canAddChildNodeWithName(args.nodeType, args.childNodeName,  function (err, result) {
      var result = new NodeType.TNodeTypeService_canAddChildNodeWithName_result((err != null ? err : {success: result}));
      output.writeMessageBegin("canAddChildNodeWithName", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

NodeType.TNodeTypeServiceProcessor.prototype.process_canAddChildNodeWithType = function(seqid, input, output) {
  var args = new NodeType.TNodeTypeService_canAddChildNodeWithType_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.canAddChildNodeWithType.length === 3) {
    Q.fcall(this._handler.canAddChildNodeWithType, args.nodeType, args.childNodeName, args.nodeTypeName)
      .then(function(result) {
        var result = new NodeType.TNodeTypeService_canAddChildNodeWithType_result({success: result});
        output.writeMessageBegin("canAddChildNodeWithType", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new NodeType.TNodeTypeService_canAddChildNodeWithType_result(err);
        output.writeMessageBegin("canAddChildNodeWithType", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.canAddChildNodeWithType(args.nodeType, args.childNodeName, args.nodeTypeName,  function (err, result) {
      var result = new NodeType.TNodeTypeService_canAddChildNodeWithType_result((err != null ? err : {success: result}));
      output.writeMessageBegin("canAddChildNodeWithType", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

NodeType.TNodeTypeServiceProcessor.prototype.process_canRemoveNode = function(seqid, input, output) {
  var args = new NodeType.TNodeTypeService_canRemoveNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.canRemoveNode.length === 2) {
    Q.fcall(this._handler.canRemoveNode, args.nodeType, args.nodeName)
      .then(function(result) {
        var result = new NodeType.TNodeTypeService_canRemoveNode_result({success: result});
        output.writeMessageBegin("canRemoveNode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new NodeType.TNodeTypeService_canRemoveNode_result(err);
        output.writeMessageBegin("canRemoveNode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.canRemoveNode(args.nodeType, args.nodeName,  function (err, result) {
      var result = new NodeType.TNodeTypeService_canRemoveNode_result((err != null ? err : {success: result}));
      output.writeMessageBegin("canRemoveNode", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

NodeType.TNodeTypeServiceProcessor.prototype.process_isNodeType = function(seqid, input, output) {
  var args = new NodeType.TNodeTypeService_isNodeType_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isNodeType.length === 2) {
    Q.fcall(this._handler.isNodeType, args.nodeType, args.nodeTypeName)
      .then(function(result) {
        var result = new NodeType.TNodeTypeService_isNodeType_result({success: result});
        output.writeMessageBegin("isNodeType", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new NodeType.TNodeTypeService_isNodeType_result(err);
        output.writeMessageBegin("isNodeType", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isNodeType(args.nodeType, args.nodeTypeName,  function (err, result) {
      var result = new NodeType.TNodeTypeService_isNodeType_result((err != null ? err : {success: result}));
      output.writeMessageBegin("isNodeType", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

