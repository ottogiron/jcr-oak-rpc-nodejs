//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./tree_types');
//HELPER FUNCTIONS AND STRUCTURES

API.TTreeService_addChild_args = function(args) {
  this.name = null;
  this.tree = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.tree !== undefined) {
      this.tree = args.tree;
    }
  }
};
API.TTreeService_addChild_args.prototype = {};
API.TTreeService_addChild_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tree = new ttypes.TTree();
        this.tree.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_addChild_args.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_addChild_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.tree !== null && this.tree !== undefined) {
    output.writeFieldBegin('tree', Thrift.Type.STRUCT, 2);
    this.tree.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_addChild_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
API.TTreeService_addChild_result.prototype = {};
API.TTreeService_addChild_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TTree();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_addChild_result.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_addChild_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_getChildren_args = function(args) {
  this.tree = null;
  if (args) {
    if (args.tree !== undefined) {
      this.tree = args.tree;
    }
  }
};
API.TTreeService_getChildren_args.prototype = {};
API.TTreeService_getChildren_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tree = new ttypes.TTree();
        this.tree.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_getChildren_args.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_getChildren_args');
  if (this.tree !== null && this.tree !== undefined) {
    output.writeFieldBegin('tree', Thrift.Type.STRUCT, 1);
    this.tree.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_getChildren_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
API.TTreeService_getChildren_result.prototype = {};
API.TTreeService_getChildren_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.success = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.TTree();
          elem54.read(input);
          this.success.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_getChildren_result.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_getChildren_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter55 in this.success)
    {
      if (this.success.hasOwnProperty(iter55))
      {
        iter55 = this.success[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_getChild_args = function(args) {
  this.name = null;
  this.tree = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.tree !== undefined) {
      this.tree = args.tree;
    }
  }
};
API.TTreeService_getChild_args.prototype = {};
API.TTreeService_getChild_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tree = new ttypes.TTree();
        this.tree.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_getChild_args.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_getChild_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.tree !== null && this.tree !== undefined) {
    output.writeFieldBegin('tree', Thrift.Type.STRUCT, 2);
    this.tree.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_getChild_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
API.TTreeService_getChild_result.prototype = {};
API.TTreeService_getChild_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TTree();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_getChild_result.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_getChild_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_getParent_args = function(args) {
  this.tree = null;
  if (args) {
    if (args.tree !== undefined) {
      this.tree = args.tree;
    }
  }
};
API.TTreeService_getParent_args.prototype = {};
API.TTreeService_getParent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tree = new ttypes.TTree();
        this.tree.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_getParent_args.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_getParent_args');
  if (this.tree !== null && this.tree !== undefined) {
    output.writeFieldBegin('tree', Thrift.Type.STRUCT, 1);
    this.tree.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_getParent_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
API.TTreeService_getParent_result.prototype = {};
API.TTreeService_getParent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TTree();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_getParent_result.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_getParent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_getPropertiesByNames_args = function(args) {
  this.propertyNames = null;
  this.ttree = null;
  if (args) {
    if (args.propertyNames !== undefined) {
      this.propertyNames = args.propertyNames;
    }
    if (args.ttree !== undefined) {
      this.ttree = args.ttree;
    }
  }
};
API.TTreeService_getPropertiesByNames_args.prototype = {};
API.TTreeService_getPropertiesByNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.propertyNames = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readString();
          this.propertyNames.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ttree = new ttypes.TTree();
        this.ttree.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_getPropertiesByNames_args.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_getPropertiesByNames_args');
  if (this.propertyNames !== null && this.propertyNames !== undefined) {
    output.writeFieldBegin('propertyNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.propertyNames.length);
    for (var iter63 in this.propertyNames)
    {
      if (this.propertyNames.hasOwnProperty(iter63))
      {
        iter63 = this.propertyNames[iter63];
        output.writeString(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ttree !== null && this.ttree !== undefined) {
    output.writeFieldBegin('ttree', Thrift.Type.STRUCT, 2);
    this.ttree.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_getPropertiesByNames_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
API.TTreeService_getPropertiesByNames_result.prototype = {};
API.TTreeService_getPropertiesByNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size64 = 0;
        var _rtmp368;
        this.success = {};
        var _ktype65 = 0;
        var _vtype66 = 0;
        _rtmp368 = input.readMapBegin();
        _ktype65 = _rtmp368.ktype;
        _vtype66 = _rtmp368.vtype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var key70 = null;
          var val71 = null;
          key70 = input.readString();
          val71 = new ttypes.TPropertyState();
          val71.read(input);
          this.success[key70] = val71;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_getPropertiesByNames_result.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_getPropertiesByNames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter72 in this.success)
    {
      if (this.success.hasOwnProperty(kiter72))
      {
        var viter73 = this.success[kiter72];
        output.writeString(kiter72);
        viter73.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_getProperties_args = function(args) {
  this.ttree = null;
  if (args) {
    if (args.ttree !== undefined) {
      this.ttree = args.ttree;
    }
  }
};
API.TTreeService_getProperties_args.prototype = {};
API.TTreeService_getProperties_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ttree = new ttypes.TTree();
        this.ttree.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_getProperties_args.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_getProperties_args');
  if (this.ttree !== null && this.ttree !== undefined) {
    output.writeFieldBegin('ttree', Thrift.Type.STRUCT, 1);
    this.ttree.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_getProperties_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
API.TTreeService_getProperties_result.prototype = {};
API.TTreeService_getProperties_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size74 = 0;
        var _rtmp378;
        this.success = {};
        var _ktype75 = 0;
        var _vtype76 = 0;
        _rtmp378 = input.readMapBegin();
        _ktype75 = _rtmp378.ktype;
        _vtype76 = _rtmp378.vtype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var key80 = null;
          var val81 = null;
          key80 = input.readString();
          val81 = new ttypes.TPropertyState();
          val81.read(input);
          this.success[key80] = val81;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_getProperties_result.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_getProperties_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter82 in this.success)
    {
      if (this.success.hasOwnProperty(kiter82))
      {
        var viter83 = this.success[kiter82];
        output.writeString(kiter82);
        viter83.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_setPropertiesValue_args = function(args) {
  this.values = null;
  this.ttree = null;
  if (args) {
    if (args.values !== undefined) {
      this.values = args.values;
    }
    if (args.ttree !== undefined) {
      this.ttree = args.ttree;
    }
  }
};
API.TTreeService_setPropertiesValue_args.prototype = {};
API.TTreeService_setPropertiesValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.values = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = new ttypes.TPropertyState();
          elem90.read(input);
          this.values.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ttree = new ttypes.TTree();
        this.ttree.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_setPropertiesValue_args.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_setPropertiesValue_args');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
    for (var iter91 in this.values)
    {
      if (this.values.hasOwnProperty(iter91))
      {
        iter91 = this.values[iter91];
        iter91.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ttree !== null && this.ttree !== undefined) {
    output.writeFieldBegin('ttree', Thrift.Type.STRUCT, 2);
    this.ttree.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_setPropertiesValue_result = function(args) {
};
API.TTreeService_setPropertiesValue_result.prototype = {};
API.TTreeService_setPropertiesValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_setPropertiesValue_result.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_setPropertiesValue_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_remove_args = function(args) {
  this.tree = null;
  if (args) {
    if (args.tree !== undefined) {
      this.tree = args.tree;
    }
  }
};
API.TTreeService_remove_args.prototype = {};
API.TTreeService_remove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tree = new ttypes.TTree();
        this.tree.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_remove_args.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_remove_args');
  if (this.tree !== null && this.tree !== undefined) {
    output.writeFieldBegin('tree', Thrift.Type.STRUCT, 1);
    this.tree.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeService_remove_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
API.TTreeService_remove_result.prototype = {};
API.TTreeService_remove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

API.TTreeService_remove_result.prototype.write = function(output) {
  output.writeStructBegin('TTreeService_remove_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API.TTreeServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
API.TTreeServiceClient.prototype = {};
API.TTreeServiceClient.prototype.seqid = function() { return this._seqid; }
API.TTreeServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
API.TTreeServiceClient.prototype.addChild = function(name, tree, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addChild(name, tree);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addChild(name, tree);
  }
};

API.TTreeServiceClient.prototype.send_addChild = function(name, tree) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addChild', Thrift.MessageType.CALL, this.seqid());
  var args = new API.TTreeService_addChild_args();
  args.name = name;
  args.tree = tree;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

API.TTreeServiceClient.prototype.recv_addChild = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API.TTreeService_addChild_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addChild failed: unknown result');
};
API.TTreeServiceClient.prototype.getChildren = function(tree, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChildren(tree);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChildren(tree);
  }
};

API.TTreeServiceClient.prototype.send_getChildren = function(tree) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChildren', Thrift.MessageType.CALL, this.seqid());
  var args = new API.TTreeService_getChildren_args();
  args.tree = tree;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

API.TTreeServiceClient.prototype.recv_getChildren = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API.TTreeService_getChildren_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChildren failed: unknown result');
};
API.TTreeServiceClient.prototype.getChild = function(name, tree, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChild(name, tree);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChild(name, tree);
  }
};

API.TTreeServiceClient.prototype.send_getChild = function(name, tree) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChild', Thrift.MessageType.CALL, this.seqid());
  var args = new API.TTreeService_getChild_args();
  args.name = name;
  args.tree = tree;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

API.TTreeServiceClient.prototype.recv_getChild = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API.TTreeService_getChild_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChild failed: unknown result');
};
API.TTreeServiceClient.prototype.getParent = function(tree, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getParent(tree);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getParent(tree);
  }
};

API.TTreeServiceClient.prototype.send_getParent = function(tree) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getParent', Thrift.MessageType.CALL, this.seqid());
  var args = new API.TTreeService_getParent_args();
  args.tree = tree;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

API.TTreeServiceClient.prototype.recv_getParent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API.TTreeService_getParent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getParent failed: unknown result');
};
API.TTreeServiceClient.prototype.getPropertiesByNames = function(propertyNames, ttree, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPropertiesByNames(propertyNames, ttree);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPropertiesByNames(propertyNames, ttree);
  }
};

API.TTreeServiceClient.prototype.send_getPropertiesByNames = function(propertyNames, ttree) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPropertiesByNames', Thrift.MessageType.CALL, this.seqid());
  var args = new API.TTreeService_getPropertiesByNames_args();
  args.propertyNames = propertyNames;
  args.ttree = ttree;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

API.TTreeServiceClient.prototype.recv_getPropertiesByNames = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API.TTreeService_getPropertiesByNames_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPropertiesByNames failed: unknown result');
};
API.TTreeServiceClient.prototype.getProperties = function(ttree, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProperties(ttree);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProperties(ttree);
  }
};

API.TTreeServiceClient.prototype.send_getProperties = function(ttree) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProperties', Thrift.MessageType.CALL, this.seqid());
  var args = new API.TTreeService_getProperties_args();
  args.ttree = ttree;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

API.TTreeServiceClient.prototype.recv_getProperties = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API.TTreeService_getProperties_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProperties failed: unknown result');
};
API.TTreeServiceClient.prototype.setPropertiesValue = function(values, ttree, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPropertiesValue(values, ttree);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPropertiesValue(values, ttree);
  }
};

API.TTreeServiceClient.prototype.send_setPropertiesValue = function(values, ttree) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPropertiesValue', Thrift.MessageType.CALL, this.seqid());
  var args = new API.TTreeService_setPropertiesValue_args();
  args.values = values;
  args.ttree = ttree;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

API.TTreeServiceClient.prototype.recv_setPropertiesValue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API.TTreeService_setPropertiesValue_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
API.TTreeServiceClient.prototype.remove = function(tree, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_remove(tree);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_remove(tree);
  }
};

API.TTreeServiceClient.prototype.send_remove = function(tree) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid());
  var args = new API.TTreeService_remove_args();
  args.tree = tree;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

API.TTreeServiceClient.prototype.recv_remove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new API.TTreeService_remove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('remove failed: unknown result');
};
API.TTreeServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
API.TTreeServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

API.TTreeServiceProcessor.prototype.process_addChild = function(seqid, input, output) {
  var args = new API.TTreeService_addChild_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addChild.length === 2) {
    Q.fcall(this._handler.addChild, args.name, args.tree)
      .then(function(result) {
        var result = new API.TTreeService_addChild_result({success: result});
        output.writeMessageBegin("addChild", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new API.TTreeService_addChild_result(err);
        output.writeMessageBegin("addChild", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addChild(args.name, args.tree,  function (err, result) {
      var result = new API.TTreeService_addChild_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addChild", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

API.TTreeServiceProcessor.prototype.process_getChildren = function(seqid, input, output) {
  var args = new API.TTreeService_getChildren_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChildren.length === 1) {
    Q.fcall(this._handler.getChildren, args.tree)
      .then(function(result) {
        var result = new API.TTreeService_getChildren_result({success: result});
        output.writeMessageBegin("getChildren", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new API.TTreeService_getChildren_result(err);
        output.writeMessageBegin("getChildren", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChildren(args.tree,  function (err, result) {
      var result = new API.TTreeService_getChildren_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getChildren", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

API.TTreeServiceProcessor.prototype.process_getChild = function(seqid, input, output) {
  var args = new API.TTreeService_getChild_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChild.length === 2) {
    Q.fcall(this._handler.getChild, args.name, args.tree)
      .then(function(result) {
        var result = new API.TTreeService_getChild_result({success: result});
        output.writeMessageBegin("getChild", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new API.TTreeService_getChild_result(err);
        output.writeMessageBegin("getChild", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChild(args.name, args.tree,  function (err, result) {
      var result = new API.TTreeService_getChild_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getChild", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

API.TTreeServiceProcessor.prototype.process_getParent = function(seqid, input, output) {
  var args = new API.TTreeService_getParent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getParent.length === 1) {
    Q.fcall(this._handler.getParent, args.tree)
      .then(function(result) {
        var result = new API.TTreeService_getParent_result({success: result});
        output.writeMessageBegin("getParent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new API.TTreeService_getParent_result(err);
        output.writeMessageBegin("getParent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getParent(args.tree,  function (err, result) {
      var result = new API.TTreeService_getParent_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getParent", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

API.TTreeServiceProcessor.prototype.process_getPropertiesByNames = function(seqid, input, output) {
  var args = new API.TTreeService_getPropertiesByNames_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPropertiesByNames.length === 2) {
    Q.fcall(this._handler.getPropertiesByNames, args.propertyNames, args.ttree)
      .then(function(result) {
        var result = new API.TTreeService_getPropertiesByNames_result({success: result});
        output.writeMessageBegin("getPropertiesByNames", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new API.TTreeService_getPropertiesByNames_result(err);
        output.writeMessageBegin("getPropertiesByNames", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPropertiesByNames(args.propertyNames, args.ttree,  function (err, result) {
      var result = new API.TTreeService_getPropertiesByNames_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getPropertiesByNames", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

API.TTreeServiceProcessor.prototype.process_getProperties = function(seqid, input, output) {
  var args = new API.TTreeService_getProperties_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProperties.length === 1) {
    Q.fcall(this._handler.getProperties, args.ttree)
      .then(function(result) {
        var result = new API.TTreeService_getProperties_result({success: result});
        output.writeMessageBegin("getProperties", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new API.TTreeService_getProperties_result(err);
        output.writeMessageBegin("getProperties", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProperties(args.ttree,  function (err, result) {
      var result = new API.TTreeService_getProperties_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getProperties", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

API.TTreeServiceProcessor.prototype.process_setPropertiesValue = function(seqid, input, output) {
  var args = new API.TTreeService_setPropertiesValue_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPropertiesValue.length === 2) {
    Q.fcall(this._handler.setPropertiesValue, args.values, args.ttree)
      .then(function(result) {
        var result = new API.TTreeService_setPropertiesValue_result({success: result});
        output.writeMessageBegin("setPropertiesValue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new API.TTreeService_setPropertiesValue_result(err);
        output.writeMessageBegin("setPropertiesValue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setPropertiesValue(args.values, args.ttree,  function (err, result) {
      var result = new API.TTreeService_setPropertiesValue_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setPropertiesValue", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

API.TTreeServiceProcessor.prototype.process_remove = function(seqid, input, output) {
  var args = new API.TTreeService_remove_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.remove.length === 1) {
    Q.fcall(this._handler.remove, args.tree)
      .then(function(result) {
        var result = new API.TTreeService_remove_result({success: result});
        output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new API.TTreeService_remove_result(err);
        output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.remove(args.tree,  function (err, result) {
      var result = new API.TTreeService_remove_result((err != null ? err : {success: result}));
      output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

