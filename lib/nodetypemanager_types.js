//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
Value = module.exports.Value = function(args) {
  this.binaryValue = null;
  this.stringValue = null;
  this.boolValue = null;
  this.doubleValue = null;
  this.longValue = null;
  this.type = null;
  if (args) {
    if (args.binaryValue !== undefined) {
      this.binaryValue = args.binaryValue;
    }
    if (args.stringValue !== undefined) {
      this.stringValue = args.stringValue;
    }
    if (args.boolValue !== undefined) {
      this.boolValue = args.boolValue;
    }
    if (args.doubleValue !== undefined) {
      this.doubleValue = args.doubleValue;
    }
    if (args.longValue !== undefined) {
      this.longValue = args.longValue;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
Value.prototype = {};
Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.binaryValue = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.boolValue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.longValue = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Value.prototype.write = function(output) {
  output.writeStructBegin('Value');
  if (this.binaryValue !== null && this.binaryValue !== undefined) {
    output.writeFieldBegin('binaryValue', Thrift.Type.STRING, 1);
    output.writeBinary(this.binaryValue);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 2);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.boolValue !== null && this.boolValue !== undefined) {
    output.writeFieldBegin('boolValue', Thrift.Type.BOOL, 3);
    output.writeBool(this.boolValue);
    output.writeFieldEnd();
  }
  if (this.doubleValue !== null && this.doubleValue !== undefined) {
    output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.doubleValue);
    output.writeFieldEnd();
  }
  if (this.longValue !== null && this.longValue !== undefined) {
    output.writeFieldBegin('longValue', Thrift.Type.I64, 5);
    output.writeI64(this.longValue);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 6);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PropertyDefinition = module.exports.PropertyDefinition = function(args) {
  this.defaultValues = null;
  this.requiredType = null;
  this.name = null;
  this.isMultiple = null;
  this.isQueryOrderable = null;
  this.isFullTextSercheable = null;
  if (args) {
    if (args.defaultValues !== undefined) {
      this.defaultValues = args.defaultValues;
    }
    if (args.requiredType !== undefined) {
      this.requiredType = args.requiredType;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.isMultiple !== undefined) {
      this.isMultiple = args.isMultiple;
    }
    if (args.isQueryOrderable !== undefined) {
      this.isQueryOrderable = args.isQueryOrderable;
    }
    if (args.isFullTextSercheable !== undefined) {
      this.isFullTextSercheable = args.isFullTextSercheable;
    }
  }
};
PropertyDefinition.prototype = {};
PropertyDefinition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.defaultValues = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Value();
          elem6.read(input);
          this.defaultValues.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.requiredType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isMultiple = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isQueryOrderable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isFullTextSercheable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PropertyDefinition.prototype.write = function(output) {
  output.writeStructBegin('PropertyDefinition');
  if (this.defaultValues !== null && this.defaultValues !== undefined) {
    output.writeFieldBegin('defaultValues', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.defaultValues.length);
    for (var iter7 in this.defaultValues)
    {
      if (this.defaultValues.hasOwnProperty(iter7))
      {
        iter7 = this.defaultValues[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requiredType !== null && this.requiredType !== undefined) {
    output.writeFieldBegin('requiredType', Thrift.Type.I32, 2);
    output.writeI32(this.requiredType);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.isMultiple !== null && this.isMultiple !== undefined) {
    output.writeFieldBegin('isMultiple', Thrift.Type.BOOL, 4);
    output.writeBool(this.isMultiple);
    output.writeFieldEnd();
  }
  if (this.isQueryOrderable !== null && this.isQueryOrderable !== undefined) {
    output.writeFieldBegin('isQueryOrderable', Thrift.Type.BOOL, 5);
    output.writeBool(this.isQueryOrderable);
    output.writeFieldEnd();
  }
  if (this.isFullTextSercheable !== null && this.isFullTextSercheable !== undefined) {
    output.writeFieldBegin('isFullTextSercheable', Thrift.Type.BOOL, 6);
    output.writeBool(this.isFullTextSercheable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeDefinition = module.exports.NodeDefinition = function(args) {
  this.defaultPrimaryType = null;
  this.requiredPrimaryTypes = null;
  if (args) {
    if (args.defaultPrimaryType !== undefined) {
      this.defaultPrimaryType = args.defaultPrimaryType;
    }
    if (args.requiredPrimaryTypes !== undefined) {
      this.requiredPrimaryTypes = args.requiredPrimaryTypes;
    }
  }
};
NodeDefinition.prototype = {};
NodeDefinition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.defaultPrimaryType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.requiredPrimaryTypes = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.requiredPrimaryTypes.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeDefinition.prototype.write = function(output) {
  output.writeStructBegin('NodeDefinition');
  if (this.defaultPrimaryType !== null && this.defaultPrimaryType !== undefined) {
    output.writeFieldBegin('defaultPrimaryType', Thrift.Type.STRING, 1);
    output.writeString(this.defaultPrimaryType);
    output.writeFieldEnd();
  }
  if (this.requiredPrimaryTypes !== null && this.requiredPrimaryTypes !== undefined) {
    output.writeFieldBegin('requiredPrimaryTypes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.requiredPrimaryTypes.length);
    for (var iter15 in this.requiredPrimaryTypes)
    {
      if (this.requiredPrimaryTypes.hasOwnProperty(iter15))
      {
        iter15 = this.requiredPrimaryTypes[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeType = module.exports.NodeType = function(args) {
  this.name = null;
  this.propertyDefinitions = null;
  this.childNodeDefinitions = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.propertyDefinitions !== undefined) {
      this.propertyDefinitions = args.propertyDefinitions;
    }
    if (args.childNodeDefinitions !== undefined) {
      this.childNodeDefinitions = args.childNodeDefinitions;
    }
  }
};
NodeType.prototype = {};
NodeType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.propertyDefinitions = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.PropertyDefinition();
          elem22.read(input);
          this.propertyDefinitions.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.childNodeDefinitions = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = new ttypes.NodeDefinition();
          elem29.read(input);
          this.childNodeDefinitions.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeType.prototype.write = function(output) {
  output.writeStructBegin('NodeType');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.propertyDefinitions !== null && this.propertyDefinitions !== undefined) {
    output.writeFieldBegin('propertyDefinitions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.propertyDefinitions.length);
    for (var iter30 in this.propertyDefinitions)
    {
      if (this.propertyDefinitions.hasOwnProperty(iter30))
      {
        iter30 = this.propertyDefinitions[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.childNodeDefinitions !== null && this.childNodeDefinitions !== undefined) {
    output.writeFieldBegin('childNodeDefinitions', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.childNodeDefinitions.length);
    for (var iter31 in this.childNodeDefinitions)
    {
      if (this.childNodeDefinitions.hasOwnProperty(iter31))
      {
        iter31 = this.childNodeDefinitions[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

